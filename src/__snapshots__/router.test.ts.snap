// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`introspection > introspecting + generating a client 1`] = `
"/* eslint-disable */
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export type Endpoints = {
  "POST /items": {
    Request: {
      message: string;
    };
    PathParams: {};
    Response: {
      id: string;
      message: string;
    };
  };
  "GET /items/:id": {
    Request: {
      filter: string;
    };
    PathParams: {
      id: string;
    };
    Response: {
      id: string;
      message: string;
    };
  };
};

/* eslint-disable */

const substituteParams = (url: string, params: Object) =>
  Object.entries(params).reduce(
    (url, [name, value]) => url.replace(":" + name, encodeURIComponent(value)),
    url,
  );

const removePathParams = (url: string, params: Object) =>
  Object.entries(params)
    .filter(([key, value]) => value !== undefined)
    .reduce(
      (accum, [name, value]) =>
        url.includes(":" + name) ? accum : { ...accum, [name]: value },
      {},
    );

const parseQueryParamsFromPagingLink = (link: string) => {
  const params = new URLSearchParams(link.split("?")[1]);

  return {
    nextPageToken: params.get("nextPageToken"),
    pageSize: params.get("pageSize"),
  };
};

export class Client {
  client: AxiosInstance;

  constructor(client: AxiosInstance) {
    this.client = client;
  }

  /**
   * Executes the \`POST /items\` endpoint.
   *
   * @param data The request data.
   * @param config The Axios request overrides for the request.
   *
   * @returns An AxiosResponse object representing the response.
   */
  createItem(
    data: Endpoints["POST /items"]["Request"] &
      Endpoints["POST /items"]["PathParams"],
    config?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Endpoints["POST /items"]["Response"]>> {
    return this.client.request({
      ...config,
      method: "POST",
      data: removePathParams("/items", data),
      url: substituteParams("/items", data),
    });
  }

  /**
   * Executes the \`GET /items/:id\` endpoint.
   *
   * @param data The request data.
   * @param config The Axios request overrides for the request.
   *
   * @returns An AxiosResponse object representing the response.
   */
  getItem(
    data: Endpoints["GET /items/:id"]["Request"] &
      Endpoints["GET /items/:id"]["PathParams"],
    config?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Endpoints["GET /items/:id"]["Response"]>> {
    return this.client.request({
      ...config,
      method: "GET",
      params: removePathParams("/items/:id", data),
      url: substituteParams("/items/:id", data),
    });
  }

  /**
   * Paginates exhaustively through the provided \`request\`, using the specified
   * \`data\`. A \`pageSize\` can be specified in the \`data\` to customize the
   * page size for pagination.
   */
  async paginate<T extends { nextPageToken?: string; pageSize?: string }, Item>(
    request: (
      data: T,
      config?: AxiosRequestConfig,
    ) => Promise<
      AxiosResponse<{ items: Item[]; links: { self: string; next?: string } }>
    >,
    data: T,
    config?: AxiosRequestConfig,
  ): Promise<Item[]> {
    const result = [];

    let nextPageParams = {};
    do {
      // @ts-expect-error
      const response = await this[request.name](
        { ...nextPageParams, ...data },
        config,
      );

      result.push(...response.data.items);

      nextPageParams = response.data.links.next
        ? parseQueryParamsFromPagingLink(response.data.links.next)
        : {};
      // @ts-expect-error
    } while (!!nextPageParams.nextPageToken);

    return result;
  }
}

module.exports.Client = Client;
"
`;
